name: Document Lifecycle Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'full-cycle'
        type: choice
        options:
        - create
        - test
        - deploy
        - full-cycle

permissions:
  id-token: write
  contents: read

env:
  FLASK_TUNNEL_URL: ${{ secrets.FLASK_TUNNEL_URL }}

jobs:
  # Vendor step - Create document
  vendor-create:
    if: github.event.inputs.action == 'create' || github.event.inputs.action == 'full-cycle' || github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: vendor  # Use GitHub environments for additional control
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get GitHub OIDC Token
        id: oidc
        uses: actions/github-script@v7
        with:
          script: |
            const token = await core.getIDToken();
            core.setSecret(token);
            core.setOutput('token', token);
      
      - name: Create Document (Vendor Action)
        env:
          GITHUB_OIDC_TOKEN: ${{ steps.oidc.outputs.token }}
        run: |
          echo "üè≠ Vendor: Creating document..."
          
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer $GITHUB_OIDC_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"document": "test-doc.pdf", "version": "1.0"}' \
            "$FLASK_TUNNEL_URL/documents/create")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Document created successfully"
            echo "$BODY" | jq .
          else
            echo "‚ùå Document creation failed: $HTTP_CODE"
            echo "$BODY"
            exit 1
          fi

  # QA step - Test document
  qa-test:
    needs: vendor-create
    if: always() && (needs.vendor-create.result == 'success' || github.event.inputs.action == 'test')
    runs-on: ubuntu-latest
    environment: qa
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get GitHub OIDC Token
        id: oidc
        uses: actions/github-script@v7
        with:
          script: |
            const token = await core.getIDToken();
            core.setSecret(token);
            core.setOutput('token', token);
      
      - name: Test Document (QA Action)
        env:
          GITHUB_OIDC_TOKEN: ${{ steps.oidc.outputs.token }}
        run: |
          echo "üß™ QA: Testing document..."
          
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer $GITHUB_OIDC_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"document_id": "test-doc.pdf", "test_suite": "full"}' \
            "$FLASK_TUNNEL_URL/documents/test")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Document tested successfully"
            echo "$BODY" | jq .
          else
            echo "‚ùå Document testing failed: $HTTP_CODE"
            exit 1
          fi
      
      - name: Approve Document (QA Action)
        env:
          GITHUB_OIDC_TOKEN: ${{ steps.oidc.outputs.token }}
        run: |
          echo "‚úÖ QA: Approving document..."
          
          curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_OIDC_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"document_id": "test-doc.pdf", "approved": true}' \
            "$FLASK_TUNNEL_URL/documents/approve" | jq .

  # Deployer step - Deploy document
  deployer-deploy:
    needs: [vendor-create, qa-test]
    if: always() && (needs.qa-test.result == 'success' || github.event.inputs.action == 'deploy')
    runs-on: ubuntu-latest
    environment: production  # Requires approval for production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get GitHub OIDC Token
        id: oidc
        uses: actions/github-script@v7
        with:
          script: |
            const token = await core.getIDToken();
            core.setSecret(token);
            core.setOutput('token', token);
      
      - name: Deploy Document (Deployer Action)
        env:
          GITHUB_OIDC_TOKEN: ${{ steps.oidc.outputs.token }}
        run: |
          echo "üöÄ Deployer: Deploying document..."
          
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer $GITHUB_OIDC_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"document_id": "test-doc.pdf", "environment": "production"}' \
            "$FLASK_TUNNEL_URL/documents/deploy")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Document deployed successfully"
            echo "$BODY" | jq .
          else
            echo "‚ùå Document deployment failed: $HTTP_CODE"
            exit 1
          fi
      
      - name: Install Document (Deployer Action)
        env:
          GITHUB_OIDC_TOKEN: ${{ steps.oidc.outputs.token }}
        run: |
          echo "üì¶ Deployer: Installing document..."
          
          curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_OIDC_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"document_id": "test-doc.pdf", "target": "production-server"}' \
            "$FLASK_TUNNEL_URL/documents/install" | jq .

  # Summary job
  summary:
    needs: [vendor-create, qa-test, deployer-deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Pipeline Summary
        run: |
          echo "## Pipeline Summary"
          echo "- Vendor Create: ${{ needs.vendor-create.result }}"
          echo "- QA Test: ${{ needs.qa-test.result }}"
          echo "- Deployer Deploy: ${{ needs.deployer-deploy.result }}"
