name: Versioning


on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # This workflow cont
  build:
    # needs: start
    runs-on: ubuntu-latest
    name: Versioning
      
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Validate Commit Message Content
      uses: gsactions/commit-message-checker@v1
      with:
        pattern: '(#major|#minor|#patch)'
        # pattern: '^(#\d{3,6}|((Merge|dbeaver|cloudbeaver).+?#\d{3,6})|((DB-|CB-|DVO-)\d+))\s.*$'
        error: |
          Each commit message must include one of the following:
          *  #major -> for changes which breaks the API
          *  #minor -> for feature changes which NOT breaks the API
          *  #patch -> for Fixes on current feature
      
    - uses: paulhatch/semantic-version@v4.0.2
      id: versioning
      with:
        # The prefix to use to identify tags
        # tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "#major"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "#minor"
        # A string to determine the format of the version output
        format: "${major}.${minor}.${patch}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
          # change_path: "src/my-service"
        # Named version, will be used as suffix for name version tag
          # namespace: my-service
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: true
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        # search_commit_body: true
        # The output method used to generate list of users, 'csv' or 'json'.
        # user_format_type: "json"

    - name: Version Check
      run: echo "${{ steps.versioning.outputs.major }}.${{ steps.versioning.outputs.minor }}.${{ steps.versioning.outputs.patch }}"

    # - name: Tag Commit
    #   run: git tag -a ${{ steps.versioning.outputs.major }}.${{ steps.versioning.outputs.minor }}.${{ steps.versioning.outputs.patch }}

    - name: Create tag
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ steps.versioning.outputs.major }}.${{ steps.versioning.outputs.minor }}.${{ steps.versioning.outputs.patch }},
            sha: context.sha
          })
    